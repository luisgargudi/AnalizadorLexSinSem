package com.compiler.compiler;

import javafx.concurrent.Task;
import javafx.fxml.Initializable;
import javafx.scene.control.TextArea;
import javafx.stage.FileChooser;
import org.fxmisc.richtext.CodeArea;
import org.fxmisc.richtext.LineNumberFactory;
import org.fxmisc.richtext.model.StyleSpans;
import org.fxmisc.richtext.model.StyleSpansBuilder;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.compiler.compiler.CompiladorMain.executor;

public class Controller implements Initializable {


    public CodeArea CodeArea;
    public TextArea consoleOutput;
    File currentFile = null;
    Stack<String> ParseStack = null;

    void Log(String message) {
        consoleOutput.setText(consoleOutput.getText() + message + "\n");
    }


    final String[] LProd = {"Prog'", "Prog", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Dec", "Tipo", "Tipo", "Tipo", "Tipo", "V", "V", "Asig", "S", "S", "S", "E", "E", "E", "T", "T", "T", "F", "F", "F", "F", "F", "If", "Else", "Else", "Condicion", "OpRel", "OpRel", "OpRel", "OpRel", "OpRel", "OpRel", "Bucle-for", "ExIncre", "ExIncre", "Read", "Imprimir", "Msj", "Msj", "OtroMsj", "OtroMsj",};
    final String[] RProd = {"ACEPTA", "Programa id { Sentencias }", "Dec", "Asig Sentencias", "Imprimir", "Read", "If Sentencias", "Bucle-for Sentencias", "ε", "Tipo id V", "float", "int", "char", "String", ", id V", "; Sentencias", "id = S ;", "+ E", "- E", "E", "E + T", "E - T", "T", "T * F", "T / F", "F", "( E )", "id", "num", "litCad", "litCar", "if ( Condicion ) { Sentencias } Else", "else { Sentencias }", "ε", "E OpRel E", "<", ">", "==", "!=", "<=", ">=", "for ( Asig Condicion ; id ExIncre ) { Sentencias }", "++", "--", "read ( id ) ; Sentencias", "print [ Msj ] ; Sentencias", "litCad OtroMsj", "id OtroMsj", "+ Msj", "ε"};
    final int[] NumPops = {2, 10, 2, 4, 2, 2, 4, 4, 0, 6, 2, 2, 2, 2, 6, 4, 8, 4, 4, 2, 6, 6, 2, 6, 6, 2, 6, 2, 2, 2, 2, 16, 8, 0, 6, 2, 2, 2, 2, 2, 2, 22, 2, 2, 12, 12, 4, 4, 4, 0};

    final String[] Rows = {"Q0", "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q10", "Q11", "Q12", "Q13", "Q14", "Q15", "Q16", "Q17", "Q18", "Q19", "Q20", "Q21", "Q22", "Q23", "Q24", "Q25", "Q26", "Q27", "Q28", "Q29", "Q30", "Q31", "Q32", "Q33", "Q34", "Q35", "Q36", "Q37", "Q38", "Q39", "Q40", "Q41", "Q42", "Q43", "Q44", "Q45", "Q46", "Q47", "Q48", "Q49", "Q50", "Q51", "Q52", "Q53", "Q54", "Q55", "Q56", "Q57", "Q58", "Q59", "Q60", "Q61", "Q62", "Q63", "Q64", "Q65", "Q66", "Q67", "Q68", "Q69", "Q70", "Q71", "Q72", "Q73", "Q74", "Q75", "Q76", "Q77", "Q78", "Q79", "Q80", "Q81", "Q82", "Q83", "Q84", "Q85", "Q86", "Q87", "Q88", "Q89", "Q90", "Q91", "Q92", "Q93", "Q94", "Q95", "Q96", "Q97", "Q98", "Q99", "Q100", "Q101", "Q102", "Q103", "Q104", "Q105"};
    final String[] Columns = {"Programa", "id", "{", "}", "float", "int", "char", "String", ",", ";", "=", "+", "-", "*", "/", "(", ")", "num", "litCad", "litCar", "if", "else", "<", ">", "==", "!=", "<=", ">=", "for", "++", "--", "read", "print", "[", "]", "$", "Prog", "Sentencias", "Dec", "Tipo", "V", "Asig", "S", "E", "T", "F", "If", "Else", "Condicion", "OpRel", "Bucle-for", "ExIncre", "Read", "Imprimir", "Msj", "OtroMsj"};

    final String[][] ParseTable = {
            {"Q2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "ACEPTA", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "Q4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q5", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "Q22", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q23", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "P4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q24", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q25", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "Q26", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q27", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q28", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q29", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q30", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P10", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P11", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P12", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "Q33", "Q34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q36", "Q37", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q35", "Q38", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q47", "Q48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q46", "0"},
            {"0", "Q49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q51", "Q39", "Q40", "0", "0", "Q50", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q52", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P9", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q53", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q54", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q55", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q56", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q57", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P19", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P22", "0", "P22", "P22", "Q60", "Q61", "0", "P22", "0", "0", "0", "0", "0", "P22", "P22", "P22", "P22", "P22", "P22", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P25", "0", "P25", "P25", "P25", "P25", "0", "P25", "0", "0", "0", "0", "0", "P25", "P25", "P25", "P25", "P25", "P25", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q62", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P27", "0", "P27", "P27", "P27", "P27", "0", "P27", "0", "0", "0", "0", "0", "P27", "P27", "P27", "P27", "P27", "P27", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P28", "0", "P28", "P28", "P28", "P28", "0", "P28", "0", "0", "0", "0", "0", "P28", "P28", "P28", "P28", "P28", "P28", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P29", "0", "P29", "P29", "P29", "P29", "0", "P29", "0", "0", "0", "0", "0", "P29", "P29", "P29", "P29", "P29", "P29", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P30", "0", "P30", "P30", "P30", "P30", "0", "P30", "0", "0", "0", "0", "0", "P30", "P30", "P30", "P30", "P30", "P30", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q63", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q65", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q64"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q65", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q66"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q67", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q68", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q70", "Q71", "Q72", "Q73", "Q74", "Q75", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q69", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q51", "Q39", "Q40", "0", "0", "Q76", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "Q33", "Q34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q77", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P16", "0", "P16", "P16", "P16", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "P16", "0", "P16", "P16", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "P16", "0", "0", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P17", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P18", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q78", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q79", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q80", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q81", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q58", "Q59", "0", "0", "0", "Q82", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q83", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P46", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q47", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q84", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P47", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q85", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "Q86", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q87", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P35", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P35", "0", "P35", "P35", "P35", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P36", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P36", "0", "P36", "P36", "P36", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P37", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P37", "0", "P37", "P37", "P37", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P38", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P38", "0", "P38", "P38", "P38", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P39", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P39", "0", "P39", "P39", "P39", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P40", "0", "P40", "P40", "P40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q88", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P14", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P20", "0", "P20", "P20", "Q60", "Q61", "0", "P20", "0", "0", "0", "0", "0", "P20", "P20", "P20", "P20", "P20", "P20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P21", "0", "P21", "P21", "Q60", "Q61", "0", "P21", "0", "0", "0", "0", "0", "P21", "P21", "P21", "P21", "P21", "P21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P23", "0", "P23", "P23", "P23", "P23", "0", "P23", "0", "0", "0", "0", "0", "P23", "P23", "P23", "P23", "P23", "P23", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P24", "0", "P24", "P24", "P24", "P24", "0", "P24", "0", "0", "0", "0", "0", "P24", "P24", "P24", "P24", "P24", "P24", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P26", "0", "P26", "P26", "P26", "P26", "0", "P26", "0", "0", "0", "0", "0", "P26", "P26", "P26", "P26", "P26", "P26", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q89", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q90", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q91", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P34", "0", "Q58", "Q59", "0", "0", "0", "P34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q92", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "P44", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "Q93", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q95", "Q96", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q94", "0", "0", "0", "0"},
            {"0", "P33", "0", "P33", "P33", "P33", "P33", "P33", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P33", "Q98", "0", "0", "0", "0", "0", "0", "P33", "0", "0", "P33", "P33", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q97", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q99", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P43", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P31", "0", "P31", "P31", "P31", "P31", "P31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P31", "0", "0", "0", "0", "0", "0", "0", "P31", "0", "0", "P31", "P31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "Q100", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "Q101", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q102", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q103", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
            {"0", "0", "0", "Q104", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "Q105", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P32", "0", "P32", "P32", "P32", "P32", "P32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P32", "0", "0", "0", "0", "0", "0", "0", "P32", "0", "0", "P32", "P32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "P41", "0", "P41", "P41", "P41", "P41", "P41", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P41", "0", "0", "0", "0", "0", "0", "0", "P41", "0", "0", "P41", "P41", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"}
    };

    int GetColumn(String token) {
        int column = -1;
        for (int i = 0; i < Columns.length; i++) {
            if (token.equals(Columns[i])) {
                column = i;
                break;
            }
        }
        return column;
    }

    int GetPenultimate() {
        int row = -1;
        for (int i = 0; i < Rows.length; i++) {
            if (Rows[i].equals(ParseStack.get(ParseStack.size() - 2))) {
                row = i;
                break;
            }
        }
        return row;
    }

    int GetRow() {
        int row = -1;
        for (int i = 0; i < Rows.length; i++) {
            if (Rows[i].equals(ParseStack.peek())) {
                row = i;
                break;
            }
        }
        return row;
    }

    int StrToInt(String cadena) {
        StringBuilder digitos = new StringBuilder();
        for (int i = 0; i < cadena.length(); i++) {
            char caracter = cadena.charAt(i);
            if (Character.isDigit(caracter)) {
                digitos.append(caracter);
            }
        }
        if (digitos.isEmpty()) {
            throw new IllegalArgumentException("La cadena no contiene dígitos.");
        }
        return Integer.parseInt(digitos.toString());
    }


    static class Symbol {
        private final String Name;
        private final String OutName;


        public Symbol(String Name, String OutName) {
            this.Name = Name;
            this.OutName = OutName;
        }

        public String getName() {
            return Name;
        }

        public String getOutName() {
            return OutName;
        }
    }

    static class SymbolTable {
        private final HashMap<String, Symbol> symbolTable;

        public SymbolTable() {
            symbolTable = new HashMap<>();
        }

        public void addSymbol(String name, String outName) {
            if (!symbolTable.containsKey(name)) {
                symbolTable.put(name, new Symbol(name, outName));
                //System.out.println("Símbolo agregado: " + name);
            }
        }

        public Symbol getSymbol(String name) {
            return symbolTable.get(name);
        }
    }


    void Parse(String Token, int Line) {

        Log(String.format("Stack actual: %s", ParseStack.toString()));


        String action = ParseTable[GetRow()][GetColumn(Token)];


        if (action.startsWith("Q")) {
            Log(String.format("%s Desplaza a %s", Token, action));
            ParseStack.push(Token);
            ParseStack.push(action);

        } else if (action.startsWith("P")) {
            int prodNum = Integer.parseInt(action.replaceAll("[^0-9]", ""));

            Log(String.format("Produccion %s = %s -> %s", action, LProd[prodNum], RProd[prodNum]));

            for (int i = 0; i < NumPops[prodNum]; i++) {
                ParseStack.pop();
            }

            ParseStack.push(LProd[prodNum]);

            action = ParseTable[GetPenultimate()][GetColumn(ParseStack.peek())];

            ParseStack.push(action);

            Parse(Token, Line);
        } else if (action.equals("0")) {

            Log(String.format("Error Sintactico: Linea: %d. Se encontro un token inesperado %s.", Line, Token));
            StringBuilder temp = new StringBuilder();
            for (int i = 0; i < 23; i++) {
                action = ParseTable[StrToInt(ParseStack.peek())][i];

                if (!action.equals("0")) {

                    switch (Rows[i]) {

                        case "V":
                            temp.append(", ; ");
                            break;
                        case "S":
                            temp.append("+ - id num litCad litCar ");
                            break;
                        case "E", "F", "T", "Condicion":
                            temp.append("( id num litCad litCar ");
                            break;
                        case "Prog":
                            temp.append("Programa ");
                            break;

                        case "Sentencias":
                            temp.append("float int char String id print read if for ");
                            break;

                        case "Dec", "Tipo":
                            temp.append("float int char String ");
                            break;

                        case "If":
                            temp.append("if ");
                            break;

                        case "Else":
                            temp.append("else ");
                            break;

                        case "OpRel":
                            temp.append("< > == != <= >= ");
                            break;

                        case "Bucle-for":
                            temp.append("for ");
                            break;

                        case "ExIncre":
                            temp.append("++ -- ");
                            break;

                        case "Read":
                            temp.append("read ");
                            break;

                        case "Imprimr":
                            temp.append("print ");
                            break;

                        case "Msj":
                            temp.append("litCad id + ");
                            break;

                        case "Asig":
                            temp.append("id ");
                            break;
                        case "P":
                            temp.append("int float char id ");
                            break;
                        default:
                            temp.append(Columns[i]).append(" ");
                    }
                }
            }
            Log(String.format("Error Sintactico: Linea: %d. Se esperaba -> %s", Line, temp));
        } else if (action.equals("ACEPTA")) {
            Log("Analisis Sintactico completado con exito.");
        }


    }

    public void Compile() {
        if (currentFile == null) {
            SaveFile();
        } else {
            SaveFile(currentFile);
        }


        if (currentFile == null) return;

        long start = System.currentTimeMillis();
        ParseStack = new Stack<>();
        ParseStack.push("$");
        ParseStack.push("Q0");

        boolean success = StartCompiler(currentFile);

        long end = System.currentTimeMillis();

        Log(success ? String.format("El analisis fue exitoso. Tiempo de ejecucion %dms", end - start) : String.format("El analisis obtuvo errores. Tiempo de ejecucion %dms", end - start));
    }

    String TransformForLoop(String originalCode, int loopCounter) {
        // Extraer el bucle for usando el método anterior
        String forLoopCode = ExtractForLoop(originalCode);

        // Extraer partes del bucle for
        String transformedCode = TransformToIntermediate(forLoopCode, loopCounter);

        // Reemplazar el bucle for original por su transformación
        return originalCode.replace(forLoopCode, transformedCode);
    }

    String TransformToIntermediate(String forLoopCode, int loopCounter) {
        // Descomponer el bucle for
        String forPattern = "for\\s*\\((.*?);(.*?);(.*?)\\)\\s*\\{(.*)\\}";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(forPattern, java.util.regex.Pattern.DOTALL);
        java.util.regex.Matcher matcher = pattern.matcher(forLoopCode);

        if (!matcher.find()) {
            throw new RuntimeException("No se pudieron extraer las partes del bucle 'for'.");
        }

        // Partes del bucle
        String condition = matcher.group(2).trim();      // Ejemplo: i < 10
        String update = matcher.group(3).trim();         // Ejemplo: i++
        String body = matcher.group(4).trim();           // Ejemplo: printf("%d\n", i);

        String forIndex = matcher.group(1).trim().substring(matcher.group(1).indexOf("=") + 1);


        // Ejemplo: int i = 0

        //int Vf1;
        //int Vf2;
        //Vf1 = 0;
        //i = vf1;
        String initialization = "int Vf1;\nint Vf2;\nVf1 = " + forIndex + ";\n" +
                matcher.group(1).trim().substring(0, matcher.group(1).indexOf("=")) + " = Vf1";




        // Generar etiquetas únicas
        String startLabel = "LABEL_FOR_" + loopCounter;
        String endLabel = "LABEL_END_FOR_" + loopCounter;

        // Generar código intermedio
        StringBuilder intermediateCode = new StringBuilder();
        intermediateCode.append("// Inicialización\n");
        intermediateCode.append(initialization).append(";\n");
        intermediateCode.append(startLabel).append(":\n");
        intermediateCode.append("// Condición\n");
        intermediateCode.append("if (!(").append(condition).append(")) goto ").append(endLabel).append(";\n");
        intermediateCode.append("// Cuerpo\n");
        intermediateCode.append(body).append("\n");
        intermediateCode.append("// Actualización\n");
        intermediateCode.append(update).append(";\n");
        intermediateCode.append("goto ").append(startLabel).append(";\n");
        intermediateCode.append(endLabel).append(":\n");

        return intermediateCode.toString();
    }

    String ExtractForLoop(String code) {
        code = code.trim();
        int forIndex = code.indexOf("for");
        if (forIndex == -1) {
            throw new RuntimeException("No se encontró ningún bucle 'for' en el código.");
        }
        int openParenIndex = code.indexOf("(", forIndex);
        int closeParenIndex = -1;
        int openParenCount = 0;
        for (int i = openParenIndex; i < code.length(); i++) {
            char c = code.charAt(i);
            if (c == '(') openParenCount++;
            else if (c == ')') openParenCount--;
            if (openParenCount == 0) {
                closeParenIndex = i;
                break;
            }
        }
        if (closeParenIndex == -1) {
            throw new RuntimeException("No se encontró el cierre del paréntesis del bucle 'for'.");
        }
        int openBraceIndex = code.indexOf("{", closeParenIndex);
        if (openBraceIndex == -1) {
            throw new RuntimeException("No se encontró el cuerpo del bucle 'for'.");
        }
        int closeBraceIndex = -1;
        int openBraceCount = 0;
        for (int i = openBraceIndex; i < code.length(); i++) {
            char c = code.charAt(i);
            if (c == '{') openBraceCount++;
            else if (c == '}') openBraceCount--;
            if (openBraceCount == 0) {
                closeBraceIndex = i;
                break;
            }
        }
        if (closeBraceIndex == -1) {
            throw new RuntimeException("No se encontró el cierre del cuerpo del bucle 'for'.");
        }
        return code.substring(forIndex, closeBraceIndex + 1);
    }

    String TransformPrintToCout(String code) {
        // Patrón para identificar declaraciones `print`
        String printPattern = "print\\s*\\((.*?)\\);";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(printPattern, java.util.regex.Pattern.DOTALL);
        java.util.regex.Matcher matcher = pattern.matcher(code);

        StringBuilder transformedCode = new StringBuilder();
        int lastMatchEnd = 0;

        while (matcher.find()) {
            // Agregar el código previo al match
            transformedCode.append(code, lastMatchEnd, matcher.start());

            // Contenido dentro de `print`
            String content = matcher.group(1).trim();

            // Transformar a `std::cout`
            String coutStatement = TransformToCout(content);
            transformedCode.append(coutStatement);

            lastMatchEnd = matcher.end();
        }

        // Agregar el resto del código
        transformedCode.append(code.substring(lastMatchEnd));

        return transformedCode.toString();
    }

    String TransformToCout(String content) {
        StringBuilder coutBuilder = new StringBuilder("std::cout << ");

        // Si la cadena inicia con corchetes, quitar los corchetes
        if (content.startsWith("[") && content.endsWith("]")) {
            content = content.substring(1, content.length() - 1).trim();
        }

        // Verificar si hay concatenaciones (separadas por '+')
        String[] parts = content.split("\\+");

        for (int i = 0; i < parts.length; i++) {
            String part = parts[i].trim();

            // Si es una cadena de texto (entre comillas dobles)
            if (part.startsWith("\"") && part.endsWith("\"")) {
                coutBuilder.append(part);
            } else {
                // Asumimos que es una variable
                coutBuilder.append(part);
            }

            // Agregar `<<` entre elementos concatenados
            if (i < parts.length - 1) {
                coutBuilder.append(" << ");
            }
        }

        coutBuilder.append(";\n");
        return coutBuilder.toString();
    }

    String TransformPrintStatements(String code) {
        // Patrón para encontrar las declaraciones `print` con corchetes
        String printPattern = "print\\s*\\[\\s*\"(.*?)\"\\s*\\];";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(printPattern, java.util.regex.Pattern.DOTALL);
        java.util.regex.Matcher matcher = pattern.matcher(code);

        StringBuilder transformedCode = new StringBuilder();
        int lastMatchEnd = 0;

        while (matcher.find()) {
            // Agregar el código previo al match
            transformedCode.append(code, lastMatchEnd, matcher.start());

            // Capturar el texto dentro de `print [""]`
            String content = matcher.group(1).trim();

            // Transformar a `std::cout`
            String coutStatement = "std::cout << \"" + content + "\";";
            transformedCode.append(coutStatement);

            lastMatchEnd = matcher.end();
        }

        // Agregar el resto del código
        transformedCode.append(code.substring(lastMatchEnd));

        return transformedCode.toString();
    }


    boolean StartCompiler(File file) {
        boolean flagError = false;
        try {
            Reader reader = new BufferedReader(new FileReader(file));
            Lexer lexer = new Lexer(reader);


            int CurrentLine = 0;
            StringBuilder OutputCode = new StringBuilder();
            SymbolTable symbolTable = new SymbolTable();
            int VarCount = 1;
            int loopCount = 0;
            boolean isDeclaringVar = false;
            boolean isDeclaringProgram = false;
            boolean alreadyHitSemicolon = false;
            boolean hasFor = false;
            while (true) {
                Tokens token = lexer.yylex();
                if (token == null) {
                    Parse("$", CurrentLine);
                    break;
                }
                Log(String.format("Token: %s(%s)", token.name(), lexer.lexeme));

                switch (token) {
                    case salto:
                        ++CurrentLine;
                        OutputCode.append("\n");
                        break;
                    case espacio:
                        OutputCode.append(lexer.lexeme);
                        break;
                    case reservada:
                        Parse(lexer.lexeme, CurrentLine);


                        if(lexer.lexeme.equals("Programa")) {
                            isDeclaringProgram = true;
                            continue;
                        }

                        if (lexer.lexeme.equals("int") || lexer.lexeme.equals("float") || lexer.lexeme.equals("char")) {
                            isDeclaringVar = true;
                            alreadyHitSemicolon = false;
                        }

                        if(lexer.lexeme.equals("for")) {
                            hasFor = true;
                            loopCount++;
                        }


                        OutputCode.append(lexer.lexeme);
                        break;
                    case coma:
                        Parse(lexer.lexeme, CurrentLine);
                        OutputCode.append(lexer.lexeme);

                        if (!alreadyHitSemicolon) {
                            isDeclaringVar = true;
                        }

                        break;
                    case finSentencia:

                        Parse(lexer.lexeme, CurrentLine);
                        OutputCode.append(lexer.lexeme);
                        alreadyHitSemicolon = true;

                        break;
                    case asignacion:
                    case aritmetico:
                    case agrupacion:
                    case relacional:
                    case igual:
                    case dif:
                    case mayIgual:
                    case menIgual:
                    case incr:
                    case decr:
                        //txtComponentes.setText(txtComponentes.getText() + lexer.lexeme + " ");
                        Parse(lexer.lexeme, CurrentLine);
                        OutputCode.append(lexer.lexeme);
                        break;

                    case ERROR:

                        Log(String.format("Error: Token %s no reconocido. Linea %d", lexer.lexeme, CurrentLine));
                        return false;
                    case ERRORLCAD:
                    case ERRORLCAR:
                        Log(String.format("Error Lexico: Linea %d. Se esperaban comillas", CurrentLine));
                        flagError = true;
                        break;
                    case id:
                        Parse(token + "", CurrentLine);

                        Symbol currentSymbol = symbolTable.getSymbol(lexer.lexeme);

                        if(isDeclaringProgram) {
                            OutputCode.append("#include <iostream>\n" +
                                    "#define read(x) std::cin >> x\n" +
                                    "int main()");
                            isDeclaringProgram = false;
                            continue;
                        }

                        if (isDeclaringVar) {
                            System.out.println("Declarando variable");
                            if (currentSymbol == null) {
                                symbolTable.addSymbol(lexer.lexeme, "V" + VarCount);
                                VarCount++;
                                System.out.println("Variable agregada " + lexer.lexeme);
                            } else {
                                Log(String.format("Error semantico: Linea %d. La variable '%s' ya ha sido declarada.", CurrentLine, lexer.lexeme));
                                flagError = true;
                                break;
                            }


                            isDeclaringVar = false;
                        }
                        currentSymbol = symbolTable.getSymbol(lexer.lexeme);
                        if (currentSymbol == null) {
                            Log(String.format("Error semantico: Linea %d. La variable '%s' aun no ha sido declarada.", CurrentLine, lexer.lexeme));
                            flagError = true;
                            break;
                        }


                        OutputCode.append(currentSymbol.getOutName());


                        break;
                    default:
                        Parse(token + "", CurrentLine);
                        OutputCode.append(lexer.lexeme);
                }
            }
            //String outputFileName = file.getAbsolutePath().replace(".lya2", ".obj");
            /*Writer writer = new BufferedWriter(new FileWriter(outputFileName));
*/
            //writer.write(hasFor ? TransformForLoop(OutputCode.toString(), loopCount) : OutputCode.toString());

            System.out.println("\nCodigo Intermedio:\n");
            String tempOutput = hasFor ? TransformForLoop(OutputCode.toString(), loopCount) : OutputCode.toString();
            tempOutput = TransformPrintToCout(tempOutput);
            tempOutput = TransformPrintStatements(tempOutput);

            String output = tempOutput.substring(0, tempOutput.lastIndexOf("}")) +
                    "\treturn 0;\n}";
            System.out.println(output);



            /*writer.close();*/
            reader.close();
        } catch (IOException e) {
            Log(e.getMessage());
        }

        return !flagError;
    }


    private Task<StyleSpans<Collection<String>>> computeHighlightingAsync() {
        String text = CodeArea.getText();
        Task<StyleSpans<Collection<String>>> task = new Task<>() {
            @Override
            protected StyleSpans<Collection<String>> call() {
                return computeHighlighting(text);
            }
        };
        executor.execute(task);
        return task;
    }


    private void applyHighlighting(StyleSpans<Collection<String>> highlighting) {
        CodeArea.setStyleSpans(0, highlighting); //agrega el color a las palabras reservadas
    }

    public static final String[] KEYWORDS = {
            "abstract", "assert", "break",
            "case", "catch", "class", "const",
            "continue", "default", "do", "else",
            "enum", "extends", "final", "finally",
            "for", "goto", "if", "implements", "import",
            "instanceof", "interface", "native",
            "new", "package", "private", "protected", "public",
            "return", "static", "strictfp", "super",
            "switch", "synchronized", "this", "throw", "throws",
            "transient", "try", "void", "volatile", "while"
    };
    public static final String[] PRIMITIVE_TYPES = {
            "byte", "String", "char", "unsigned", "int",
            "short", "bool", "boolean", "long", "float",
            "double"
    };


    private final String KEYWORD_PATTERN = "\\b(" + String.join("|", KEYWORDS) + ")\\b";
    private final String DATA_TYPE_PATTERN = String.join("|", PRIMITIVE_TYPES);
    private final String SYMBOLS_PATTERN = "[=;{}()\\[\\]+\\-*/<>!&#|\\.]";
    private final String STRING_PATTERN = "\"([^\"\\\\]|\\\\.)*\"";
    private final String CHAR_PATTERN = "\'([^\"\\\\]|\\\\.)\'";
    private final String COMMENT_PATTERN = "//[^\n]*" + "|" + "/\\*(.|\\R)*?\\*/";
    private final String NON_KEYWORD_PATTERN = "[a-zA-Z_][a-zA-Z0-9_]*";
    private final String NUMBER_PATTERN = "\\b[0-9_]+\\b";

    private final Pattern PATTERN = Pattern.compile(
            "(?<KEYWORD>" + KEYWORD_PATTERN + ")"
                    + "|(?<DATATYPE>" + DATA_TYPE_PATTERN + ")"
                    + "|(?<STRING>" + STRING_PATTERN + ")"
                    + "|(?<CHAR>" + CHAR_PATTERN + ")"
                    + "|(?<COMMENT>" + COMMENT_PATTERN + ")"
                    + "|(?<NUMBER>" + NUMBER_PATTERN + ")"
                    + "|(?<SYMBOL>" + SYMBOLS_PATTERN + ")"
                    + "|(?<NONKEYWORD>" + NON_KEYWORD_PATTERN + ")"
    );

    private StyleSpans<Collection<String>> computeHighlighting(String text) {
        Matcher matcher = PATTERN.matcher(text);
        int lastKwEnd = 0;
        StyleSpansBuilder<Collection<String>> spansBuilder = new StyleSpansBuilder<>();
        while (matcher.find()) {
            String styleClass =
                    matcher.group("KEYWORD") != null ? "keyword" :
                            matcher.group("DATATYPE") != null ? "primitive-type" :
                                    matcher.group("STRING") != null ? "string" :
                                            matcher.group("CHAR") != null ? "string" :
                                                    matcher.group("COMMENT") != null ? "comment" :
                                                            matcher.group("NUMBER") != null ? "number" :
                                                                    matcher.group("SYMBOL") != null ? "normal-text" :  // Asignar normal-text a símbolos
                                                                            matcher.group("NONKEYWORD") != null ? "normal-text" :
                                                                                    null; /* never happens */
            assert styleClass != null;
            spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);
            spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());
            lastKwEnd = matcher.end();
        }
        spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);
        return spansBuilder.create();
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        executor = Executors.newSingleThreadExecutor(); //Creamos un hilo para computar las palabras reservadas y tipos de datos


        CodeArea.setParagraphGraphicFactory(LineNumberFactory.get(CodeArea));
        CodeArea.multiPlainChanges()
                .successionEnds(Duration.ofMillis(100))
                .retainLatestUntilLater(executor)
                .supplyTask(this::computeHighlightingAsync)
                .awaitLatest(CodeArea.multiPlainChanges())
                .filterMap(t -> {
                    if (t.isSuccess()) {
                        return Optional.of(t.get());
                    } else {
                        Log(t.getFailure().toString());
                        return Optional.empty();
                    }
                })
                .subscribe(this::applyHighlighting);
        CodeArea.caretPositionProperty().addListener((obs, oldVal, newVal) -> {
            int currentLine = CodeArea.getCurrentParagraph();
            CodeArea.setParagraphStyle(currentLine, Collections.singleton("-fx-background-color: #2b2b2b;"));
        });
    }

    void SaveFile(File file) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(CodeArea.getText());
        } catch (IOException ex) {
            Log(ex.getMessage());
        }
    }

    public void SaveFile() {
        FileChooser chooser = new FileChooser();
        chooser.setTitle("Save File");
        chooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Archivos de texto (*.txt)", "*.txt"),
                new FileChooser.ExtensionFilter("Archivos de compilador (*.lya)", "*.lya2")
        );
        currentFile = chooser.showSaveDialog(null);

        if (currentFile == null) {
            return;
        }

        SaveFile(currentFile);

    }

    public void CloseFile() {
        if (!CodeArea.getText().isEmpty()) {
            SaveFile();
        }
        currentFile = null;
        CodeArea.clear();
    }


    public void NewFile() {
        currentFile = null;
        CodeArea.clear();
    }

    public void OpenFile() {
        FileChooser chooser = new FileChooser();
        chooser.setTitle("Open File");
        chooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Archivos de compilador (*.lya)", "*.lya2")
        );
        currentFile = chooser.showOpenDialog(null);

        if (currentFile == null) {
            return;
        }
        try {
            CodeArea.appendText(Files.readString(currentFile.toPath()));
        } catch (IOException ex) {
            Log(ex.getMessage());
        }

    }
}